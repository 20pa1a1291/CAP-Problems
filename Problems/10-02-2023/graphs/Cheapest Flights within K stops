There are n cities and m edges connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from the city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

Example 1:
Input:
n = 4
flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]
src = 0
dst = 3
k = 1
Output:
700
Explanation:
The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.

CODE :

class Solution {
    static class pair{
        int first,second;
        pair(int first,int second){
            this.first=first;
            this.second=second;
        }
    }
    static class tuple{
        int first,second,third;
        tuple(int first,int second,int third){
            this.first=first;
            this.second=second;
            this.third=third;
        }
    }
    
    public int CheapestFLight(int n,int flights[][],int src,int dst,int k) {
        ArrayList<ArrayList<pair>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        int m=flights.length;
        for(int i=0;i<m;i++){
            adj.get(flights[i][0]).add(new pair(flights[i][1],flights[i][2]));
        }
        Queue<tuple> q=new LinkedList<>();
        int[] dist=new int[n];
        for(int i=0;i<n;i++){
            dist[i]=Integer.MAX_VALUE;
        }
        dist[src]=0;
        q.add(new tuple(0,src,0));
        while(!q.isEmpty()){
            tuple it=q.peek();
            q.remove();
            int stops=it.first;
            int node=it.second;
            int cost=it.third;
            if(stops>k) continue;
            for(pair iter: adj.get(node)){
                int adjnode=iter.first;
                int edw=iter.second;
                if(cost+edw<dist[adjnode] && stops<=k){
                    dist[adjnode]=cost+edw;
                    q.add(new tuple(stops+1,adjnode,cost+edw));
                }
            }
        }if(dist[dst]==Integer.MAX_VALUE) return -1;
        return dist[dst];
        
    }
}
