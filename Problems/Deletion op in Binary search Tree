Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 

Example 1:


Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

CODE:
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
            return root;
        }
        TreeNode p=null;
        TreeNode cur=root;
        while(cur!=null && cur.val!=key){
            p=cur;
            if(key<cur.val){
                cur=cur.left;
            }
            else{
                cur=cur.right;
            }
        }
        if(cur!=null){
            if(cur.left==null && cur.right==null && p!=null){
                if(p.val>cur.val){
                    p.left=null;
                }
                else{
                    p.right=null;
                }
                return root;
            }
        if(cur.left!=null && cur.right!=null){
            TreeNode temp=cur.right;
            p=cur;
            while(temp.left!=null){
                p=temp;
                temp=temp.left;
            }
            cur.val=temp.val;
            cur=temp;
        }
        if(key==root.val){
            if(root.left!=null){
            root=root.left;
            }
            else{
               root=root.right;
            }
        return root;
        }
        if(p.val>cur.val){
            if(cur.left!=null){
                p.left=cur.left;
            }
            else{
                p.left=cur.right;
            }
        }
        else{
            if(cur.left!=null){
                p.right=cur.left;
            }
            else{
                p.right=cur.right;
            }
        }
        }
        return root;
    }
}
