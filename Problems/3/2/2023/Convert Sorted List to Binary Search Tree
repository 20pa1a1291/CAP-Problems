Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.
Example 1:
Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.

Example 2:
Input: head = []
Output: []


CODE :

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ListNode curr;
    public TreeNode sortedListToBST(ListNode head) {
        int count=0;
        curr=head;
        while(curr!=null){
            curr=curr.next;
            count++;
        }
        curr=head;
        return toBST(1,count);
        
    }
    private TreeNode toBST(int i,int j){
        if(i>j) return null;
        int mid=i+j >> 1;
        TreeNode node=new TreeNode();
        node.left=toBST(i,mid-1);
        node.val=curr.val;
        curr=curr.next;
        node.right=toBST(mid+1,j);
        return node;
    }
}
