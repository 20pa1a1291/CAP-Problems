Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.
Example 1:
Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]

Example 2:
Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
Output: [3,2,null,1]

Example 3:
Input: root = [3], low = 2, high = 2
Output: []



CODE :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if(root==null) return root;
        
        while(root!=null && (root.val<low || root.val>high)){
            if(root.val<low )
                root=root.right;
           
            if(root.val>high )
                root=root.left;
            
        }
        
        TreeNode node=root;
        while(node!=null){
            while(node.left!=null && node.left.val<low){
                node.left=node.left.right;
            }
            node=node.left;
        }
        node=root;
        while(node!=null){
            while(node.right!=null && node.right.val>high){
                node.right=node.right.left;
            }
            node=node.right;
        }
        return root;
    }
}
