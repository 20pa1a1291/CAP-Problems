You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Example 1:
Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]

Example 2:
Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.



CODE :
class Solution{
    TreeNode prev=null,first=null,second=null;
    public static void recoverBST(treeNode root){
      helper(root);
      swap(first.val,second.val);
      }
     void swap(int a,int b){
      int temp=a;
      a=b;
      b=temp;
      }
      private void helper(TreeNode curr){
        if(curr==null)
          return ;
        helper(curr.left);
        if(prev!=null && prev.val>curr.val){
          if(first==null)
            {first=prev;}
          second=curr;
          }
          prev=curr;
          helper(curr.right);
          }
          }
     
