Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 

Example 1:


Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode curr=root;
        
        TreeNode parent=null;
        
        while(curr.val!=key)
        {
            parent=curr;
            
            if(curr.val>key)
                curr=curr.left;
            else
                curr=curr.right;
        }
        if(curr.left!=null && curr.right!=null)
        {
            parent=curr;
            
            TreeNode temp=curr.left;
            
            while(temp.right!=null)
            {
                parent=temp;
                temp=temp.right;
            }
            int tempdata=temp.val;
            temp.val=curr.val;
            curr.val=tempdata;
            
            curr=temp;
        }
        if(curr.val==root.val)
        {
            if(root.left!=null)
                root=root.left;
            else
                root=root.right;
            return root;
        }
        if(curr.val<parent.val)
        {
            if(curr.left!=null)
                parent.right=curr.left;
            else
                parent.right=curr.right;
        }
        else
        {
            if(curr.left!=null)
                parent.left=curr.left;
            else
                parent.left=curr.right;
            
        }
        return root;
        }
        
    }
