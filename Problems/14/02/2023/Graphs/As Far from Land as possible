Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.
The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

Example 1:
Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.

Example 2:
Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.

CODE :

class Solution {
    public int maxDistance(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][] vis=new int[n][m];
        Queue<int[]> q=new LinkedList<>();
        int count=0;
        int w=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    q.add(new int[]{i,j});
                    vis[i][j]=1;
                }
                else 
                    ++w;
            }
        }
        if(w==0||w==m*n)
            return -1;
        while(!q.isEmpty()){
             int[] ox={-1,0,1,0};
            int[] oy={0,1,0,-1};
            int size=q.size();
            while(size-->0){
                int[] curr=q.poll();
                for(int i=0;i<ox.length;i++){
                    int r=curr[0]+ox[i];
                    int c=curr[1]+oy[i];
                    if(r>=0&&c>=0&&r<n&&c<m&&vis[r][c]==0&&grid[r][c]==0){
                        vis[r][c]=1;
                        q.add(new int[]{r,c});
                        
                    }
                }
            }
            count++;
        }
        return count-1;
    }
}





CODE 2:

class Solution {
    public int maxDistance(int[][] grid) {
        int n = grid.length;
        int[][] dp = new int[n][n];

        // top left to bottom right
        // first row
        dp[0][0] = grid[0][0] == 1 ? 0 : 10000;
        for(int i=1; i<n; i++) {
            dp[0][i] = grid[0][i] == 1 ? 0 : dp[0][i-1] + 1;
        }
        // first col
        for(int i=1; i<n; i++) {
            dp[i][0] = grid[i][0] == 1 ? 0 : dp[i-1][0] + 1;
        }

        for(int i=1; i<n; i++) {
            for(int j=1; j<n; j++) {
                dp[i][j] = grid[i][j] == 1 ? 0 : Math.min(dp[i-1][j], dp[i][j-1]) + 1;
            }
        }

        // bottom right to top left
        // last row
        for(int i=n-2; i>=0; i--) {
            dp[n-1][i] = Math.min(dp[n-1][i], dp[n-1][i+1] + 1);
        }
        
        // last col
        for(int i=n-2; i>=0; i--) {
            dp[i][n-1] = Math.min(dp[i][n-1], dp[i+1][n-1] + 1);
        }
        
        
        for(int i=n-2; i>=0; i--) {
            for(int j=n-2; j>=0; j--) {
                dp[i][j] = Math.min(dp[i][j], Math.min(dp[i][j+1], dp[i+1][j]) + 1);
            }
        }
        
        int max = 0;
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                max = Math.max(max, dp[i][j]);
            }
        }
        
        return max == 0 || max >= 10000 ? -1 : max;
    }
}
