class DisJoint{
   List<Integer> rank=new ArrayList<>();
   List<Integer> parent=new ArrayList<>();
   public DisJoint(int n){
      for(int i=1;i<=n;i++){
          rank.add(0);
          parent.add(i);
          }
          }

    public int findUPar(int node){
        if(node==parent.get(node))
            return node;
        int Upar=findUPar(parent.get(node));
        parent.set(node,Upar);
        return parent.get(node);
        }
     
    public void Union(int u,int v){
        int pu=findUPar(u);
        int pv=findUPar(v);
        if(pu==pv) return;
        if(rank.get(pu)<rank.get(pv))
            parent.set(pu,pv);
        else if(rank.get(pu)>rank.get(pv))
            parent.set(pv,pu);
        else
          {  parent.set(pv,pu);
            int rnk=rank.get(pu);
            rank.set(pu,rnk+1);  }
     }
     }
     

    class Main {
    public static void main (String[] args) {
        DisjointSet ds = new DisjointSet(7);
        ds.Union(1, 2);
        ds.Union (2, 3);
        ds.Union(4, 5);
        ds.Union(6, 7);
        ds.Union(5, 6);
        // if 3 and 7 same or not
        if(ds.finduPar(3)==ds.findUPar(7))  {
            System.out.println("Same"):
        }
        else
            System.out.printin("not Same");
        ds.unionByRank(3, 7);
        if(ds.finduPar(3)==ds.findUPar(7))  {
            System.out.println("Same"):
        }
        else
            System.out.printin("not Same");
            }
}
