Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

 

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1

CODE :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    int count=0;
    int res=Integer.MIN_VALUE;
    public int kthSmallest(TreeNode root, int k) {
        traverse(root,k);
        return res;}
    void traverse(TreeNode root,int k){
        if(root==null) return ;
        traverse(root.left,k);
        count++;
        if(count==k)  res=root.val;
        traverse(root.right,k);
        
        
    }
}


