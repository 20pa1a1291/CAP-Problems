Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node and Source vertex S.
 

Note: The Graph doesn't contain any negative weight cycle.

 

Example 1:

Input:
V = 2
adj [] = {{{1, 9}}, {{0, 9}}}
S = 0
Output:
0 9
Explanation:

The source vertex is 0. Hence, the shortest 
distance of node 0 is 0 and the shortest 
distance from node 1 is 9.

CODE :

class Solution
{
    static class pair{
        int dis,node;
        pair(int dis,int node){
            dis=dis;
            node=node;
        }
    } 
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        PriorityQueue<pair> pq = new PriorityQueue<pair>((x,y)->x.dis-y.dis);
        int[] dist=new int[V];
        for(int i=0;i<V;i++){
            dist[i]=(int)(1e9);
        }
        dist[S]=0;
        pq.add(new pair(0,S));
        
        while(pq.size()!=0){
            int dis=pq.peek().dis;
            int node=pq.peek().node;
            pq.remove();
            for(int i=0;i<adj.get(node).size();i++){
                int edwei=adj.get(node).get(i).get(1);
                int nd=adj.get(node).get(i).get(0);
                
                if(dis+edwei<dist[nd])
                    {dist[nd]=dis+edwei;
                    pq.add(new pair(dist[nd],nd));}
                
            }
        }
        return dist;
    }
}

