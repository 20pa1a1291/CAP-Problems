CODE :

class Solution{
  private void dfs(int node,int[] vis,ArrayList<ArrayList<Integer>> adj,Stack<Integer> st){
    vis[node]=1;
    for(int it:adj.get(node)){
    if(vis[it]==0)
      dfs(it,vis,adj,st);
      }
      st.push(node);
      }
   private void dfs2(int node,ArrayList<ArrayList<Integer>> adjr,int[] vis){
      vis[node]=1;
      for(int it:adjr.get(node)){
        if(vis[it]==0)
          dfs(it,adjr,vis);
          }
          }
  public int kusaraju(int V,ArrayList<ArrayList<Integer>> adj{
    Stack<Integer> st=new Stack<>();
    int[] vis=new vis[V];
    for(int i=0;i<V;i++){
      if(vis[i]==0)
        dfs(i,vis,adj,st);
        }
    ArrayList<ArrayList<Integer>> adjr=new ArrayList<ArrayList<>():
    for(int i=0;i<V;i++){
      adjr.add(new ArrayList<Integer>());
      }
    for(int i=0;i<V;i++){
    vis[i]=0;
    for(int it:adj.get(i)){
      adjr.get(it).add(i);
      }
      }
    int scc=0;
    while(!st.isEmpty()){
    int node=st.peek();
    st.remove();
    if(vis[node]==0){
    scc++;
    dfs(node,adjr,vis);
    }
    }
    return scc;
    }
    
