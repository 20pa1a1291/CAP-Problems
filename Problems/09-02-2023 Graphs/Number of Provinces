There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3

CODE :

class Solution {
    public int findCircleNum(int[][] M) {
        int n = M.length;
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
            for(int j=0;j<n;j++){
                if(M[i][j]==1)
                    adj.get(i).add(j);
            }
        }
        int[] vis=new int[adj.size()];
        int count = 0;
        
        for(int i = 0; i < n ;i++){
           if(vis[i]==0){
               dfs(i,adj,vis);
               count++;
           }
            }
            return count; 
            }
        
       
    
    
    
    private void dfs(int i,List<List<Integer>> adj,int[] vis){
       vis[i]=1;
       for(int k:adj.get(i)){
           if(vis[k]==0){
               dfs(k,adj,vis);
           }
       }
    }
    
}
